<?php
namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * MarciRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarcaRepository extends EntityRepository
{
    public function rightSideFiltersMenu($conn, $params) {
        $where = " a.anunt_inactiv = " . AnuntMasina::INACTIVE . "
        AND a.anunt_sters = " . AnuntMasina::INACTIVE . "
        AND a.vandut = " . AnuntMasina::INACTIVE . "
        AND a.data_expirarii >= '" . date("Y-m-d 23:59:59") . "'";
        if(isset($params['marca'])) {
            $where .= ' AND a.id_marca='.$params['marca']->getId();
        }
        $sql = "SELECT COUNT(a.id_marca) as count_anunturi,mm.nume,mm.slug FROM marca_masina mm LEFT JOIN anunt_masina a ON ( mm.id = a.id_marca ) WHERE $where GROUP BY a.id_marca ORDER BY mm.nume ASC";

        $sth = $conn->query($sql);
        $results = $sth->fetchAll(\PDO::FETCH_OBJ);
        return $results;
    }

    public function findArrayMarca($conn, $id_marca) {

        $where = " m.id = " . $id_marca . " AND m.is_active = true";
        $sql = "SELECT id, nume, slug FROM marca m WHERE $where";


        $sth = $conn->query($sql);
        $results = $sth->fetch(\PDO::FETCH_ASSOC);
        return $results;
    }

    public function findArrayMarcaBySlug($conn, $slug_marca) {

        $where = " m.slug = '" . $slug_marca . "' AND m.is_active = true";
        $sql = "SELECT id, nume, slug FROM marca m WHERE $where";


        $sth = $conn->query($sql);
        $results = $sth->fetch(\PDO::FETCH_ASSOC);
        return $results;
    }
}
/*$parameters = array(
            'offset' => 0,
            'limit' => 20,
            'is_active' => Products::STATUS_ACTIVE
        );
        $selectColumns = $from = $where = $group_by = $order = '';
        $joins = array();

        $selectColumns .= "select p.*";
        $from .= ' from '.$this->_em->getClassMetadata("site\\BackendBundle\\Entity\\Products")->getTableName().' p LEFT JOIN categories c ON ( c.id = p.id_category )';
        $where .= " where p.is_active=:is_active ";

        if(!empty($search_term)) {
            $parameters['searchTermLike'] = '%'.$search_term.'%';
            $parameters['searchTerm'] = strtolower($search_term);
            $selectColumns .= " ,(LENGTH(LOWER(p.title)) - LENGTH(REPLACE(LOWER(p.title), :searchTerm, '')))/LENGTH(:searchTerm) as name_rel";
            $where .=" AND ( LOWER(p.title) LIKE :searchTermLike ) ";
        }

        $group_by .= " group by p.title ";
        $order .= " order by name_rel DESC limit :offset, :limit";
        $sql = "$selectColumns $from " . implode(' ', array_unique($joins)) . " $where $group_by $order";
        $rsm = $this->getMapper();
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters($parameters);

        return $query->getResult();*/